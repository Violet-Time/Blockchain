type: edu
custom_name: stage4
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    import java.io.IOException;
    import java.io.Serializable;
    import java.util.Random;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {

    //        Scanner scanner = new Scanner(System.in);
    //        Blockchain blockchain = null;
    //        try {
    //            blockchain = (Blockchain) SerializationUtils.deserialize("D:\\Dev\\Java\\Blockchain1\\Blockchain\\task\\blockchain.data");
    //            if (!blockchain.check()){
    //                throw new IOException();
    //            }
    //            //blockchain.print();
    //        } catch (IOException | ClassNotFoundException e) {
    //
    //        }
    //        System.out.print("Enter how many zeros the hash must starts with: ");
            //int size = scanner.nextInt();
            Blockchain blockchain = new Blockchain();
            Mining mining = new Mining(blockchain);
            mining.setCOUNT(5);
            mining.run();

    //        if(blockchain == null || blockchain.getCount() != (size > 0 ? size : 1)){
    //            blockchain = new Blockchain(size);
    //        }

    //        for (int i = 0; i < 5; i++){
    //            blockchain.add();
    //            try {
    //                SerializationUtils.serialize(blockchain,"D:\\Dev\\Java\\Blockchain1\\Blockchain\\task\\blockchain.data");
    //            } catch (IOException e) {
    //                e.printStackTrace();
    //            }
    //        }

        }
    }
  learner_created: false
- name: src/blockchain/Blockchain.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.time.LocalDateTime;
    import java.time.LocalTime;
    import java.util.ArrayList;
    import java.util.Date;
    import java.util.List;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;

    public class Blockchain implements Serializable {
        private static long serialVersionUID = 1L;

        //private Blockchain instance = new Blockchain();
        private List<Block> list;
        private int numberOfZeros = 0;

        Blockchain(){
            list = new ArrayList<>();
        }

        public int getNumberOfZeros() {
            return numberOfZeros;
        }

        public String getHashOfTheLastBlock(){
            return list.size() == 0 ? "0" : list.get(list.size() - 1).getaHashOfAllFieldsOfaBLock();
        }

        public int getIdOfTheLastBlock(){
            return list.size() == 0 ? 0 : list.get(list.size() - 1).getId();
        }
        public int getSize(){
            return list.size();
        }


        synchronized public void add(Block block){
            if (getHashOfTheLastBlock().equals(block.getHashOfThePreviousBlock()) &&
                    block.getaHashOfAllFieldsOfaBLock().matches("^0{" + numberOfZeros + "}.+")) {
                list.add(block);
                System.out.print(block);
                if (block.getTimeGeneration() < 15){
                    numberOfZeros++;
                    System.out.println("N was increased to 1");
                }else if (numberOfZeros > 0 && block.getTimeGeneration() > 60){
                    numberOfZeros--;
                    System.out.println("N was decreased by 1");
                }else {
                    System.out.println("N stays the same");
                }
                System.out.println("");

            }

    //        int beginTime = LocalTime.now().toSecondOfDay();
    //        list.add(new Block(list.size() + 1, count, list.size() == 0 ? "0" : list.get(list.size() - 1).getaHashOfAllFieldsOfaBLock()));
    //        System.out.println(list.get(list.size() - 1));
            serialVersionUID++;
        }
        public boolean check(){
            if (list.size() > 0 && "0".equals(list.get(0).getHashOfThePreviousBlock())) {
                for (int i = 1; i < this.list.size(); i++) {
                    if (!list.get(i - 1).getaHashOfAllFieldsOfaBLock().equals(list.get(i).getHashOfThePreviousBlock())) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        }
        public void print(){
            list.forEach(System.out::println);
        }

        @Override
        public String toString() {
            return "Blockchain{" +
                    "list=" + list +
                    '}';
        }
    }
  learner_created: false
- name: src/blockchain/SerializationUtils.java
  visible: true
  text: |
    package blockchain;

    import java.io.*;

    public class SerializationUtils {
        /**
         * Serialize the given object to the file
         */
        public static void serialize(Object obj, String fileName) throws IOException {
            FileOutputStream fos = new FileOutputStream(fileName);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            ObjectOutputStream oos = new ObjectOutputStream(bos);
            oos.writeObject(obj);
            oos.close();
        }

        /**
         * Deserialize to an object from the file
         */
        public static Object deserialize(String fileName) throws IOException, ClassNotFoundException {
            FileInputStream fis = new FileInputStream(fileName);
            BufferedInputStream bis = new BufferedInputStream(fis);
            ObjectInputStream ois = new ObjectInputStream(bis);
            Object obj = ois.readObject();
            ois.close();
            return obj;
        }
    }
  learner_created: false
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.security.MessageDigest;
    import java.time.LocalTime;
    import java.util.Date;
    import java.util.Random;

    public class Block implements Serializable{
        private String numberMainer;
        private int id;
        private long timeStamp;
        private int timeGeneration;
        private String hashOfThePreviousBlock;
        private String aHashOfAllFieldsOfaBLock;
        private int magic;
        private int numberOfZeros;

        Block(String numberMainer, int id, long timeStamp, int timeGeneration, int numberOfZeros, String hashOfThePreviousBlock, String aHashOfAllFieldsOfaBLock, int magic) {
            this.numberMainer = numberMainer;
            this.id = id;
            this.timeStamp = timeStamp;
            this.timeGeneration = timeGeneration;
            this.numberOfZeros = numberOfZeros;
            this.hashOfThePreviousBlock = hashOfThePreviousBlock;
            this.aHashOfAllFieldsOfaBLock = aHashOfAllFieldsOfaBLock;
            this.magic = magic;

        }

        public int getId() {
            return id;
        }

        public long getTimeStamp() {
            return timeStamp;
        }

        public int getTimeGeneration() {
            return timeGeneration;
        }

        public String getaHashOfAllFieldsOfaBLock() {
            return aHashOfAllFieldsOfaBLock;
        }

        public String getHashOfThePreviousBlock() {
            return hashOfThePreviousBlock;
        }



        @Override
        public String toString() {
            return "Block:" +
                    "\nCreated by miner # " + numberMainer +
                    "\nId: " + id +
                    "\nTimestamp: " + timeStamp +
                    "\nMagic number: " + magic +
                    "\nHash of the previous block:\n" + hashOfThePreviousBlock +
                    "\nHash of the block:\n" + aHashOfAllFieldsOfaBLock +
                    "\nBlock was generating for "+ timeGeneration +" seconds\n";
        }
    }
  learner_created: false
- name: src/blockchain/Miner.java
  visible: true
  text: |
    package blockchain;

    import java.security.MessageDigest;
    import java.util.Date;
    import java.util.Random;

    public class Miner implements Runnable {

        private int id;
        private int numberOfZeros;
        private String hashOfThePreviousBlock;
        private Blockchain blockchain;

        Miner(Blockchain blockchain){
            this.id = blockchain.getIdOfTheLastBlock() + 1;
            this.numberOfZeros = blockchain.getNumberOfZeros();
            this.hashOfThePreviousBlock = blockchain.getHashOfTheLastBlock();
            this.blockchain = blockchain;
        }

        private String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }

        private void startMining(){
            //System.out.println(Thread.currentThread().getName());
            long timeStamp = new Date().getTime();
            int magic;
            String aHashOfAllFieldsOfaBLock;
            Random random = new Random();
            while (true) {
                if(blockchain.getIdOfTheLastBlock() + 1 != id) {
                    break;
                }
                magic = random.nextInt(100000000);
                aHashOfAllFieldsOfaBLock = applySha256("" + id + timeStamp + hashOfThePreviousBlock + magic);
                if (aHashOfAllFieldsOfaBLock.matches("^0{" + numberOfZeros + "}.+")) {
                    blockchain.add(new Block(Thread.currentThread().getName().substring(14),
                            id,
                            timeStamp,
                            (int) ( new Date().getTime() - timeStamp) / 1000,
                            numberOfZeros,
                            hashOfThePreviousBlock,
                            aHashOfAllFieldsOfaBLock,
                            magic));
                    break;
                }
            }

        }

        @Override
        public void run() {
            startMining();
        }
    }
  learner_created: false
- name: src/blockchain/Mining.java
  visible: true
  text: |
    package blockchain;

    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;

    public class Mining {
        private final int POOL_SIZE = 10;
        //private final int NUMBER_OF_TASKS = 10;
        private int COUNT;
        private int COUNTT = 0;
        ExecutorService executor = Executors.newFixedThreadPool(POOL_SIZE);
        private int size;
        Blockchain blockchain;

        Mining(Blockchain blockchain){
            this.blockchain = blockchain;
            size = blockchain.getSize();
        }

        public int getCOUNT() {
            return COUNT;
        }

        public void setCOUNT(int COUNT) {
            this.COUNT = COUNT;
        }

        public void run() {
            for (int c = 0; c < COUNT; c++){
                for (int i = 0; i < POOL_SIZE; i++) {
                    executor.submit(new Miner(blockchain));
                }
                while (size == blockchain.getSize()){
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                size = blockchain.getSize();
            }
            shutDown();
        }
        public void shutDown(){
            executor.shutdown();
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/50/stages/274/implement#comment
status: Solved
record: 3
